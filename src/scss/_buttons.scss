// Buttons
// TODO: Find a way to prevent transition on page load without JS (Chrome Bug!)

@mixin btn-mix($theme-color, $border-color, $color) {
  background: $theme-color;
  border: $btn-border-width solid $border-color;
  color: $color;
}

@mixin btn-hover($theme-color, $border-color, $color) {
  &:not(.disabled):not([disabled]):hover {
    background: $theme-color;
    border-color: $border-color;
    color: $color;
    text-decoration: none;
  }

  // TODO: What is this for again? Lol
  //&:hover {
  //  color: $color;
  //  text-decoration: none;
  //}
}

@mixin btn-active($theme-color, $border-color) {
  &:not(.disabled):not([disabled]):active {
      background: $theme-color;
      border-color: $border-color;
  }
}

@mixin btn-focus($theme-color) {
  &:not(.disabled):not([disabled]):focus {
    box-shadow: 0 0 0 2px lighten($theme-color, 15%);
  }
}

@mixin btn-size($font-size, $padding-y, $padding-x) {
  font-size: $font-size;
  padding: $padding-y $padding-x;
}

.btn {
  @include border-radius($border-radius-sm);
  @include btn-size($btn-font-size-default, $btn-padding-y-default, $btn-padding-x-default);
  display: inline-block;
  font-weight: $btn-font-weight;
  outline: none;
  text-align: center;
  text-transform: uppercase;
  transition: all .25s;
  user-select: none; // To prevent highlight the text inside the buttons
  vertical-align: middle;
  white-space: nowrap; // To prevent from wrapping or placing text on the new line

  @each $name, $value in $theme-colors {

    &-#{$name} {
      $color: if($name == 'inverse', $color-default, #fff);
      @include btn-mix($value, $value, $color);
      @include btn-hover(lighten($value, 5%), lighten($value, 5%), $color);
      @include btn-active(darken($value, 5%), darken($value, 5%));
      @include btn-focus($value);
    }

    &-#{$name}-outline {
      $color: if($name == 'inverse', $color-default, #fff);
      @include btn-mix(none, $value, $value);
      @include btn-hover(lighten($value, 5%), lighten($value, 5%), $color);
      @include btn-active(darken($value, 5%), darken($value, 5%));
      @include btn-focus($value);

      //&:not(.disabled):not([disabled]):focus {
      //  background: $value;
      //  border-color: $value;
      //  color: $color;
      //  text-decoration: none;
      //}
    }

    &-#{$name}-transparent {
      @include btn-mix(none, rgba($value, 0), $value);
      @include btn-hover(rgba($value, .3), rgba($value, 0), $value);
      @include btn-active(rgba($value, .5), rgba($value, 0));
      @include btn-focus($value);

      //&:not(.disabled):not([disabled]):focus {
      //  background: rgba($value, .3);
      //  color: $value;
      //  text-decoration: none;
      //}
    }
  }

  &-sm {
    @include btn-size($btn-font-size-sm, $btn-padding-y-sm, $btn-padding-x-sm);
  }

  &-lg {
    @include btn-size($btn-font-size-lg, $btn-padding-y-lg, $btn-padding-x-lg);
  }

  &-block {
    display: block;
    width: 100%;
  }

  &-block + &-block {
    margin-top: $btn-block-margin-y;
  }

  &-pill {
    border-radius: $border-radius-pill;
  }

  &.disabled, &:disabled {
    cursor: default;
    opacity: .5;
  }
}

// Disable click event on <a> elements
a.btn.disabled, fieldset[disabled] a.btn {
  pointer-events: none;
}

input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}
